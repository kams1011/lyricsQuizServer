plugins {
	id 'java'
//	id 'war'
	id 'org.springframework.boot' version '2.7.9'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'      // asciidoc파일을 변환해주고, Build폴더에 복사해주는 플러그인
	/**
	 * vue-project를 build하기 위한 설정
	 * - node gradle plugin 추가
	 */
	id "com.github.node-gradle.node" version "3.0.1"
}

group = 'kr.toy'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '1.8'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.4")
	snippetsDir = file('build/generated-snippets')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}


/**
 * vue-project를 build하기 위한 설정
 * - node gradle plugin의 node 설정 추가
 */
node {
	/**
	 * 특정 Node.js 버전을 다운로드 및 설치 할 지 여부
	 * true: 다운로드 및 설치
	 * false: 전역으로 설치된 Node.js 사용함.
	 */
	download = true

	/**
	 * download가 true일 경우에만 사용
	 * version에 명시한 버전으로 Node.js 다운로드 및 설치
	 * workDir에 설치됨
	 */
	version = "20.8.1"

	/**
	 * 사용할 npm 버전을 지정하면 npmWorkDir에 설치됨
	 * npm 버전을 지정하지 않으면 Node.js에 번들로 제공되는 npm 버전으로 사용됨
	 */

	/**
	 * download가 true일 경우에만 사용
	 * Node.js 배포를 가져오기 위한 기본 URL
	 */
	distBaseUrl = "https://nodejs.org/dist"

	/**
	 * npmInstall 작업에 의해 실행되는 npm 명령
	 * 기본적으로 설치되지만 ci로 변경할 수 있음
	 */
	npmInstallCommand = "install"

	/**
	 * download가 true일 경우에만 사용
	 * Node.js가 압축 해제된 디렉토리
	 */
	workDir = file("${project.projectDir}/.gradle/nodejs")

	/**
	 * npm이 설치된 디렉토리 (특정 버전이 정의된 경우)
	 */
	npmWorkDir = file("${project.projectDir}/.gradle/npm")

	/**
	 * vue 프로젝트 디렉토리 위치
	 * package.json 파일과 node_modules 디렉토리가 있는 곳
	 * "저는 프로젝트 Root 아래 vue 프로젝트를 생성하였으므로 아래와 같이 주소를 작성해주었습니다."
	 */
//	nodeProjectDir = file("${project.projectDir}/vue-project")
	nodeProjectDir = file("${project.projectDir}/frontend")

	// Whether the plugin automatically should add the proxy configuration to npm and yarn commands
	// according the proxy configuration defined for Gradle
	// Disable this option if you want to configure the proxy for npm or yarn on your own
	// (in the .npmrc file for instance)
	nodeProxySettings = ProxySettings.SMART
}

configurations {
	asciidoctorExtensions
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	/**
	 * vue-project를 build하기 위한 설정
	 * - node gradle 추가
	 */
	gradlePluginPortal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
//	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//DB
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql:42.6.0'

	//Spring Rest Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	//WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	//JSON
	implementation 'com.fasterxml.jackson.core:jackson-core:2.10.2'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.2'

	//Configuration
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	//Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: '6.1.5'

	// JWT library (jjwt)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'

	// H2 Database
	implementation 'com.h2database:h2'

	// OpenFeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.0'
//
	// Aws S3
//	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.174'

	// MIME Type Check
	implementation group: 'org.apache.tika', name: 'tika-core', version: '1.24'

	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//embedded-redis
	implementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

	//Log4J2
	implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
	implementation 'org.apache.logging.log4j:log4j-core:2.19.0'

	//FFmpeg
	implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'

	testCompileOnly 'org.projectlombok:lombok:1.18.22' //테스트 환경에서 주입
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'	//테스트환경의 어노테이션 주입
}

/**
 * vue-project를 build하기 위한 설정
 * - node gradle 추가
 */
apply plugin: 'com.github.node-gradle.node'

test {
	dependsOn 'processResources', 'bootJarMainClassName'
	println 'Running test task...'
	outputs.dir snippetsDir
	useJUnitPlatform()
}

sourceSets {
	test {
		resources {
			srcDir 'src/test/java' // 테스트 리소스 디렉토리 경로 지정
		}
	}
}

asciidoctor {
	dependsOn test
		println 'Running asciidoctor task...'
		def snippetsDir = file("build/generated-snippets")
		if (!snippetsDir.exists()) {
			snippetsDir.mkdirs()
			println "build/generated-snippets 폴더를 생성했습니다."
		} else {
			println "build/generated-snippets 폴더가 이미 존재합니다."
		}
		// config 추가
		configurations 'asciidoctorExtensions'
		inputs.dir snippetsDir
		outputDir file('build/docs/asciidoc')
		// include 연산을 사용할 때 base 디렉터리를 지정해줍니다.
		baseDirFollowsSourceFile()
}

//asciidoctor.doFirst {
//	delete file('src/main/resources/static/docs')
//}



task copyDocument(type: Copy) {
	dependsOn asciidoctor            // (8-1)
	from file("${asciidoctor.outputDir}")   // (8-2)
	into file("src/main/resources/static/docs")  // (8-3)
}

build {
	println 'Running build task...'
	dependsOn copyDocument  // (9) 빌드되기전 copyDocument task 실행
}

bootJar {
	dependsOn copyDocument    // (10-1) bootJar 실행되기전 copyDocument task 실행
	from ("${asciidoctor.outputDir}") {  // (10-2) bootJar에 asciidoctor task에서 생성된 html 파일 추가
		into 'static/docs'     // (10-3) bootJar에 추가될 경로
	}
}

/**
 * vue-project를 build하기 위한 설정
 * - vue-project의 기존 빌드 결과물을 제거하기 위한 task
 */
task deleteVueBuildFiles(type: Delete) {
	delete "src/main/resources/static/static", "src/main/resources/static/index.html", "${project.projectDir}/frontend/node_modules"
}


/**
 * vue-project를 build하기 위한 설정
 * - vue-project를 빌드하기 위한 npm build task
 *
 * dependsOn에 'deleteVueBuildFiles', 'npmInstall' task 정보를 지정하였으므로
 * npmBuild task는 위 두 task에 의존한다는 것이고,
 * npmBuild가 실행되기 전 위 두 task가 차례대로 먼저 실행됩니다.
 * deleteVueBuildFiles task는 빌드 결과물을 제거하기 위하여 별도 만든 task이고,
 * npmInstall task는 node plugin에서 제공하는 task입니다.
 */
task npmBuild(type: NpmTask, dependsOn: ['deleteVueBuildFiles', 'npmInstall']) {
	args = ["run", "build"]
}

/**
 * vue-project를 build하기 위한 설정
 * node gradle에서 제공하는 npmInstall task를 어느 시점에 실행시켜 줄지 지정해주는 것입니다.
 * "gradle build 시 수행되는 processResources task가 실행되기 전에 npmBuild task를 실행하라"
 *
 * 그리고 npmBuild task의 의존으로 deleteVueBuildFiles, npmInstall task가 있으므로,
 * "npmBuild task가 실행하기 전에 deleteVueBuildFiles, npmInstall task를 순서대로 실행하라."
 *
 * 정리한 task 실행 순서는
 * 1) deleteVueBuildFiles
 * 2) npmInstall
 * 3) npmBuild
 * 4) processResources
 * 입니다.
 */

//processResources.dependsOn 'npmBuild'


