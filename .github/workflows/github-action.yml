# github repository actions 페이지에 나타날 이름
name: lyricsQuiz github-action CI/CD

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # JDK setting - github actions에서 사용할 JDK 설정
      - uses: actions/checkout@v4
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
      - name: make application.yml
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'dev')
        run: |
          if [ ! -d "./src/main/resources" ]; then
            mkdir -p ./src/main/resources 
            touch ./src/main/resources/application.yml 
            echo "${{ secrets.YML }}" > ./src/main/resources/application.yml
          else
            cd ./src/main/resources 
            touch ./application.yml 
            echo "${{ secrets.YML }}" > ./application.yml
          fi
        shell: bash

          # 환경별 yml 파일 생성(2) - db
      - name: make application-db.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-db.yml
          echo "${{ secrets.YML_DB }}" > ./application-db.yml
        shell: bash

      # 환경별 yml 파일 생성(3) - oauth
      - name: make application-oauth.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.YML_OAUTH }}" > ./application-oauth.yml
        shell: bash

      # 환경별 yml 파일 생성(4) - redis
      - name: make application-redis.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-redis.yml
          echo "${{ secrets.YML_REDIS }}" > ./application-redis.yml
        shell: bash

      # 환경별 yml 파일 생성(5) - security
      - name: make application-security.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-security.yml
          echo "${{ secrets.YML_SECURITY }}" > ./application-security.yml
        shell: bash

      # 환경별 yml 파일 생성(6) - storage
      - name: make application-storage.yml
        if: contains(github.ref, 'dev')
        run: |
          cd ./src/main/resources
          touch ./application-storage.yml
          echo "${{ secrets.YML_STORAGE }}" > ./application-storage.yml
        shell: bash

      # 환경별 env 파일 생성(6) - env
      - name: make .env
        if: contains(github.ref, 'dev')
        run: |
          ls
          cd ./frontend
          touch ./.env
          echo "${{ secrets.ENV }}" > ./.env
        shell: bash

      # permission granting
      - name: Permission granting to gradlew
        run: chmod +x ./gradlew

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build

      # make zip file
      - name: Make zip file
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      # AWS 사용자 정보 입력
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
          aws-region: ap-northeast-2

      # S3에 zip 파일 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/deploy/$GITHUB_SHA.zip --source .

      # CodeDeploy에 배포 요청
      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APP_NAME }}
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }}
          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=deploy/$GITHUB_SHA.zip
